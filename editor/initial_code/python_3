from typing import List, Tuple

Coordinates = List[Tuple[int, int]]


def similar_triangles(coords_1: Coordinates, coords_2: Coordinates) -> bool:

    return False


if __name__ == '__main__':
    assert similar_triangles([(0, 0), (1, 2), (2, 0)], [(3, 0), (4, 2), (5, 0)]) is True, 'basic'
    assert similar_triangles([(0, 0), (1, 2), (2, 0)], [(3, 0), (4, 3), (5, 0)]) is False, 'basic (different)'
    assert similar_triangles([(0, 0), (1, 2), (2, 0)], [(2, 0), (4, 4), (6, 0)]) is True, 'scaling'
    assert similar_triangles([(0, 0), (0, 3), (2, 0)], [(3, 0), (5, 3), (5, 0)]) is True, 'reflection'
    assert similar_triangles([(1, 0), (1, 2), (2, 0)], [(3, 0), (5, 4), (5, 0)]) is True, 'scaling and reflection'
    assert similar_triangles([(1, 0), (1, 3), (2, 0)],
                             [(3, 0), (5, 5), (5, 0)]) is False, 'scaling and reflection (different)'
    assert similar_triangles([(0, 2), (1, 4), (5, 2)], [(0, 1), (1, 3), (5, 1)]) is True, 'overlap'
    assert similar_triangles([(1, 3), (4, 2), (2, 1)], [(2, -2), (0, -3), (-1, -1)]) is True, 'negative coordinates'
    assert similar_triangles([(1, 3), (2, 5), (3, 3)], [(3, 0), (3, 2), (5, 1)]) is True, 'rotate 90 degrees'
    assert similar_triangles([(1, 3), (2, 5), (3, 3)], [(1, 1), (3, 1), (2, -1)]) is True, 'rotate 180 degrees'
    assert similar_triangles([(1, 3), (2, 5), (3, 3)], [(1, 2), (-1, 0), (1, 0)]) is False, 'rotate different'
    print("Coding complete? Click 'Check' to earn cool rewards!")
